---
title: "{{< fa regular folder-open >}} Diretórios"
lang: pt-BR
---

Os comandos a seguir são essenciais na gestão de diretórios no Linux. Importante lembrar que a maioria dos diretórios dentro do Linux irão requerer permissão de superusuário para que possam ser modificados. Esses diretórios em um servidor são de responsabilidade do adminstrador do sistema e estarão fora do escopo de permissões de um usuário, por esse motivo abordaremos operações comuns que podem ser realizadas na nossa pasta de usuário `/home`.

::: callout-note
As funções não serão abordadas em detalhes, serão apresentados os usos de caso mais comuns, para maiores informações de cada função acesse a sua respectiva ***man page*** usando o terminal.
:::

## Diretório de Trabalho

`pwd` - *print working directory*

```{default}
pwd
```

    /home/paulo/Documents/SandBox

## Listando conteúdo de diretórios

`ls` - *list directory contents*

![](images/ls.png){fig-align="center" width="700"}


O terminal pode apresentar os resultados com esquemas de cores diferentes a depender do tipo de shell sendo utilizado. De maneira geral, diretórios são destacados com cores (azul neste caso), diferenciando-os de arquivos de texto (branco), imagens (roxo), e arquivos com permissão de execução ou outros formatos especiais (verde).

Utilizando opções é possível modificar o tipo de saída. Por padrão o comando `ls` não exibe arquivos ou diretórios ocultos, isto pode ser alterado utilizando a opção `a`. A opção `l` lista o conteúdo em um formato mais longo e detalhado. É possível combinar opções ou simplesmente listá-las uma após a outra, lembrando sempre de consultar a documentação para o uso de `-` ou `--`. Por exemplo, os dois comandos abaixo retornam o mesmo resultado.

```{default}
ls -l -a
ls -la
```

![](images/ls-la.png){fig-align="center" width="700"}

Algumas opções também possuem uma descrição literal, sendo mais fáceis de lembrar, embora requeiram mais digitação. A opção `a` poderia ser substituida por `all`, essas não podem ser concatenadas e devem ser declaradas separadamente. Nem todas as opções possuem uma forma alternativa no padrão GNU, é sempre bom checar a documentação. O comando abaixo retorna a mesma saída do último que rodamos acima.

```{default}
ls -l --all
```


É possível listar arquivos específicos passando como argumento para o `ls` a extensão do arquivo ou parte do nome por exemplo. O comando abaixo lista todos os arquivos com extensão `.R`, o `*` é um caractere de **expressão regular** que indica para o comando que o objetivo é buscar qualquer nome de arquivo desde que este termine com a extensão desejada. 

```{default}
ls *.R
```

![](images/ls-ext.png){fig-align="center" width="700"}
```{default}
ls *map*
```

![](images/ls-map.png){fig-align="center" width="700"}

Expressões regulares são muito úteis e utilizadas constantemente em diversos comandos de terminal, falaremos mais em detalhes ao longo do curso. Na imagem abaixo[^1] seguem alguns coringas que podem ser utilizados para otimizar buscas por arquivos e diretórios no sistema.

[^1]: Haeder _et al._, 2010. LPI Linux Certification, Third Edition, O'Reilly Media.p. 101.

![](images/wildcards.png){fig-align="center" height="700"}

## Criando diretórios

`mkdir` [opções] _diretórios_: cria um ou mais diretórios, você precisa ter permissão de escrita no diretório destino.

```{default}
mkdir meu_diretorio
```

![](images/mkdir_a.png){fig-align="center" width="700"}

Duas das opções mais utilizadas com o `mkdir` são `-m` e `-p`. A opção `-m`define o **modo de acesso** do diretório a ser criado. A opção `-p` cria diretórios superiores, caso eles não existam.

```{default}
# a opção -m 444 define modo de somente leitura para o novo diretório
mkdir -m 444 minha_pasta 
```

![](images/mkdir_mode.png){fig-align="center" width="700"}

Observe as diferenças nas permissões de arquivos para as duas pastas. `d` refere-se a _directory_ , `r` a _read_, `w` a _write_ e `x` a _execution_. Estas três são as classes de acesso/permissão de arquivos e diretórios no Linux, leitura, escrita e execução. O bloco de acesso é formado por três trincas representando as permissões para `Usuário`, `Grupo` e `Outro` respectivamente. O usuário que é o dono do arquivo, o grupo proprietário do arquivo (todo usuário do Linux pertence a um grupo no sistema) e o acesso para outros usuários.

É possível criar múltiplos diretórios com um único comando, basta separar os nomes dos diretórios por espaços. 

```{default}
mkdir folder_a folder_b
```


![](images/mkdir_multi.png){fig-align="center" width="700"}

Também é possível a criação de árvores de diretório com a opção `-p` para a criação dos diretórios superiores caso estes ainda não tenham sido criados.

```{default}
mkdir -p dir1/dir2/dir3
```


![](images/mkdir_tree.png){fig-align="center" width="700"}

Embora criar diretórios possa parecer uma tarefa trivial e que pode ser realizada de maneira visual em qualquer navegador de arquivos de um SO, quando falamos de estruturas de diretórios mais complexas com muitos níveis o terminal é uma enorme ajuda. Por exemplo, imagine que tenhamos um projeto com uma estrutura bem definida de diretórios e subdiretórios, visualmente teríamos que criar cada pasta individualmente, quando no terminal em um único comando toda a estrutura é criada. Veja o exemplo.


```{default}
mkdir -p meu_projeto/{data/{raw,clean},imagens,relatorios/{pdf,html}}

```

![](images/mkdir_proj_tree.png){fig-align="center" width="800"}

Neste caso, passamos para o comando a nossa estrutura na forma de `diretorio/{subdiretório}`, separando os múltiplos subdiretórios por `,`, caso um subdiretório contenha outros subdiretórios, o padrão é o mesmo como pode ser observado no exemplo.

## Copiando, Movendo e Deletando diretórios

### Copiando

`cp` [opções] _arquivo_fonte_ _arquivo_destino_: copia arquivos

`cp` [opções] _arquivo_fonte_ _diretório_destino_: copia arquivos para um diretório específico

```{default}
cp -r folder_a folder_b
```

![](images/cp_dir.png){fig-align="center" width="700"}

Neste exemplo a pasta `folder_a` é copiada para a pasta `folder_b`. A opção `-r` indica que a cópia é recursiva, ou seja, inclui também a pasta `folder_a`, sem o uso desta opção apenas o conteúdo da pasta é copiada, mas não a pasta em si. Essa opção é muito utilizada em todas as operações de modificação de diretórios que veremos a seguir.

Para duplicar uma pasta o comando é o mesmo, observando apenas a mudança do nome da pasta destino.

```{default}
cp -r folder_a folder_c
```

### Movendo e Renomeando

`mv` [opções] _fonte_ _destino_

O comando `mv` é utilizando tanto para mover diretórios quanto para renomeá-los.

```{default}
mv dir1 dir_1
```

![](images/mv_dir.png){fig-align="center" width="700"}

```{default}
mv -i folder_a folder_b

```

![](images/mv_dir_2.png){fig-align="center" width="700"}

No primeiro exemplo, o diretório `dir1` foi renomeado para `dir_1`. No segundo exemplo o diretório `folder_a` foi movido para `folder_b`. A opção `-i` consulta interativamente o usuário antes de mover os arquivos, como neste caso já existia um outro diretório de mesmo nome na pasta destino, o terminal pergunta se o usuário gostaria de sobrescrever o diretório pré-existente. Após a confirmação o comando é executado.

### Removendo diretórios

`rm` [opções] _arquivos_

```{default}
rm -r folder_a
```


![](images/rm_dir.png){fig-aling="center" width="700"}

:::{.callout-note}
### Importante

Observe o uso da opção `-r`, essa opção é necessária se a intenção é remover todos os arquivos e o próprio diretório. Sem esta opção os arquivos internos serão excluídos e o diretório será preservado.
:::

`rmdir` [opções] _diretórios_

O comando `rmdir` também pode ser utilizado para excluir diretórios, entretanto, os diretórios precisam estar vazios. Uma combinação com a opção `-p` permite que diretórios superiores que também estejam vazios sejam removidos.

```{default}
rmdir -p meu_projeto/relatorios/html
```

![](images/rmdir.png){fig-aling="center" width="700"}

Observe na estrutura dos diretórios, embora o comando emita uma mensagem de erro informando que a pasta `meu_projeto` não pode ser excluída por não estar vazia, ele remove com sucesso a pasta `html` vazia, e o diretório ascendente `relatorios`, vazio após a exclusão feita anteriormente. Esse comando é muito útil para remoção de estrutura de diretórios de forma automatizada.

